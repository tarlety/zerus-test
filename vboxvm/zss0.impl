#!/bin/bash

# zss interface

case $1 in
	"app")
		PROJECTNAME=zerus-test
		APPNAME=vboxvm
		APPVERSION=0.1.1
		;;
	"config")
		CONFIGKEYS="vmspec diskmap_ingb lsshports rsshport iso"
		declare -A CONFIG_DESCRIPTIONS
		CONFIG_DESCRIPTIONS=( \
			["vmspec"]="How much vm is required." \
			["diskmap_ingb"]="the disk size of each vm." \
			["lsshports"]="Which localhost ports forward to vm ssh port." \
			["rsshport"]="Which vm port as ssh port." \
			["iso"]="the iso used for vm installation." \
			)

		DEFAULT_VMSPEC="u1 u2 u3"
		DEFAULT_DISKMAP_INGB='( ["u1"]="10 20" ["u2"]="10 20" ["u3"]="10 20" )'
		DEFAULT_LSSHPORTS='( ["u1"]="2201" ["u2"]="2202" ["u3"]="2203" )'
		DEFAULT_RSSHPORT=22
		DEFAULT_ISO="ubuntu-18.04.1-server-amd64.iso"
		;;
	"vars")
		RAMSIZE=1024
		DISKPATHBASE="${HOME}/VirtualBox VMs"
		USERNAME_FILE=${SECRET}/username
		PASSWORD_FILE=${SECRET}/password
		;;
	"requirement")
		echo - VBoxManage: $(which VBoxManage)
		;;
	"secret-create")
		read -p "username: " USERNAME
		echo "${USERNAME}" | gpg -ear ${GPGKEY} -o ${USERNAME_FILE}

		echo -n "password: "
		read -s PASSWORD
		echo "${PASSWORD}" | gpg -ear ${GPGKEY} -o ${PASSWORD_FILE}
		;;
	"state-data-save")
		;;
	"state-secret-load-post")
		;;
	"state-data-load")
		;;
	# AppImplementing Section: commands
	#------------------------------------------------------------------------------
	"command")
		shift
		case $1 in
		"network")
			shift
			case $1 in
				"create")
					# network: https://www.brianlinkletter.com/how-to-use-virtualbox-to-emulate-a-network/
					VBoxManage dhcpserver add --netname intnet \
						--ip 10.13.13.100 \
						--netmask 255.255.255.0 \
						--lowerip 10.13.13.101 --upperip 10.13.13.254 \
						--enable
					;;
				"delete")
					VBoxManage dhcpserver remove --netname intnet
					;;
			esac
			;;
		"ssh-forward")
			shift
			NODES=${2:-${VMSPEC}}
			for VMNAME in ${NODES}
			do
				VMIP=$(host ${VMNAME} | grep address | cut -d' ' -f4)
				LSSHPORT=${LSSHPORTS[${VMNAME}]}

				case $1 in
					"on")
						echo "Enable forwarding localhost:${LSSHPORT} to ${VMNAME}:${RSSHPORT}"
						VBoxManage controlvm ${VMNAME} natpf1 "ssh-${VMNAME},tcp,127.0.0.1,${LSSHPORT},,${RSSHPORT}"
						sudo iptables -t nat -A PREROUTING -p tcp \
							-d ${VMIP} --dport ${RSSHPORT} \
							-j DNAT --to-destination 127.0.0.1:${LSSHPORT}
						sudo iptables -t nat -A OUTPUT -p tcp \
							-d ${VMIP} --dport ${RSSHPORT} \
							-j DNAT --to-destination 127.0.0.1:${LSSHPORT}
						;;
					"off")
						echo "Disable forwarding localhost:${LSSHPORT} to ${VMNAME}:${RSSHPORT}"
						VBoxManage controlvm ${VMNAME} natpf1 delete "ssh-${VMNAME}"
						sudo iptables -t nat -D PREROUTING -p tcp \
							-d ${VMIP} --dport ${RSSHPORT} \
							-j DNAT --to-destination 127.0.0.1:${LSSHPORT}
						sudo iptables -t nat -D OUTPUT -p tcp \
							-d ${VMIP} --dport ${RSSHPORT} \
							-j DNAT --to-destination 127.0.0.1:${LSSHPORT}
						;;
				esac
			done
			;;
		"kube-forward")
			shift
			NODE=${2:-master}
			NODEIP=$(host ${NODE} | grep address | cut -d' ' -f4)
			PORT=6443

			case $1 in
				"on")
					echo "Enable forwarding localhost:${PORT} to ${NODE}:${PORT}"
					VBoxManage controlvm ${NODE} natpf1 "${NODE}-${PORT},tcp,127.0.0.1,${PORT},,${PORT}"
					sudo iptables -t nat -A PREROUTING -p tcp \
						-d ${NODEIP} --dport ${PORT} \
						-j DNAT --to-destination 127.0.0.1:${PORT}
					sudo iptables -t nat -A OUTPUT -p tcp \
						-d ${NODEIP} --dport ${PORT} \
						-j DNAT --to-destination 127.0.0.1:${PORT}
					;;
				"off")
					echo "Disable forwarding localhost:${PORT} to ${NODE}:${PORT}"
					VBoxManage controlvm ${NODE} natpf1 delete "${NODE}-${PORT}"
					sudo iptables -t nat -D PREROUTING -p tcp \
						-d ${NODEIP} --dport ${PORT} \
						-j DNAT --to-destination 127.0.0.1:${PORT}
					sudo iptables -t nat -D OUTPUT -p tcp \
						-d ${NODEIP} --dport ${PORT} \
						-j DNAT --to-destination 127.0.0.1:${PORT}
					;;
			esac
			;;
		"web-forward")
			shift
			NODE=${2:-worker}
			PORT=${3:-30443}
			NODEIP=$(host ${NODE} | grep address | cut -d' ' -f4)

			case $1 in
				"on")
					echo "Enable forwarding to ${NODE}:443"
					sudo iptables -t nat -A PREROUTING -p tcp \
						-d ${NODEIP} --dport 443 \
						-j DNAT --to-destination 127.0.0.1:30443
					sudo iptables -t nat -A OUTPUT -p tcp \
						-d ${NODEIP} --dport 443 \
						-j DNAT --to-destination 127.0.0.1:30443
					;;
				"off")
					echo "Disable forwarding localhost:${PORT} to ${NODE}:443"
					sudo iptables -t nat -D PREROUTING -p tcp \
						-d ${NODEIP} --dport 443 \
						-j DNAT --to-destination 127.0.0.1:30443
					sudo iptables -t nat -D OUTPUT -p tcp \
						-d ${NODEIP} --dport 443 \
						-j DNAT --to-destination 127.0.0.1:30443
					;;
			esac
			;;
		"vm")
			shift
			NODES=${2:-${VMSPEC}}
			case $1 in
				"create")
					USERNAME="$(gpg -d ${USERNAME_FILE})"
					PASSWORD="$(gpg -d ${PASSWORD_FILE})"
					for VMNAME in ${NODES}
					do
						# https://askubuntu.com/questions/365615/how-do-i-enable-multiple-cores-in-my-virtual-enviroment
						# - kubernetes nodes requires at least 2 cpus cores
						# - to enable multiple cores in virtualbox: Ubuntu_64, ipacpi
						VBoxManage createvm --name ${VMNAME} --register
						VBoxManage modifyvm ${VMNAME} \
							--cpus 2 \
							--memory ${RAMSIZE} \
							--acpi on \
							--boot2 dvd \
							--nic1 nat --nic2 intnet \
							--ioapic on \
							--ostype Ubuntu_64
						VBoxManage storagectl ${VMNAME} --name "SATA Controller" --add sata
						VBoxManage storagectl ${VMNAME} --name "IDE Controller" --add ide

						let id=0
						for DISK_INGB in ${DISKMAP_INGB[${VMNAME}]}
						do
							id=$((id+1))
							DISK="${DISKPATHBASE}/${VMNAME}/disk-${id}.vdi"
							VBoxManage createvdi --filename "${DISK}" --size $((${DISK_INGB}*1024))

							VBoxManage storageattach ${VMNAME} \
								--storagectl "SATA Controller" --port ${id} --device 0 \
								--type hdd --medium "${DISK}"
						done
						VBoxManage storageattach ${VMNAME} \
							--storagectl "IDE Controller" --port 0 --device 0 \
							--type dvddrive --medium ${ISO}

						# unattended installation https://www.debian.org/releases/etch/ia64/apbs04.html.zh_CN
						VBoxManage unattended install \
							${VMNAME} \
							--iso=${ISO} \
							--hostname=${VMNAME}.localhost \
							--user=${USERNAME} --password=${PASSWORD} \
							--locale=en_US --country=TW --time-zone=UTC \
							--script-template=${PWD}/UnattendedTemplates/ubuntu-preseed.cfg \
							--post-install-template=${PWD}/UnattendedTemplates/ubuntu-postinstall.sh \
							--start-vm=headless
					done
					;;
				"delete")
					for VMNAME in ${NODES}
					do
						VBoxManage controlvm ${VMNAME} poweroff
						sleep 2
						VBoxManage unregistervm --delete ${VMNAME}
					done
					;;
			esac
			;;
		esac
		;;
	#------------------------------------------------------------------------------
	"usage")
		echo $(basename $0) "[ssh-forward/kube-forward/web-forward] [on/off] [node] [port]"
		echo $(basename $0) "[network/vm] [create/delete]"
		;;
esac

