#!/bin/bash

# 0.4.0 backlogs:
#  derived: kube-apps-ctrl, docker-apps

#------------------------------------------------------------------------------
# Copyright (c) 2019, tarlety@gmail.com
#
# Zerus Scripting Standard v0.4.0
#
# This standard defines script state management framework.
# Following this framework, you can manage app states in a consistent way.
#
# Environments:
#
#    SECRET	Where to keep secrets.
#    CONFIG	Where to keep configurations.
#    STORE	Where to keep persistent data.
#
# Commands:
#
#    env                Display all runtime environments, configurables, and required tools.
#    config ...         Set configurations by this command.
#    secret-create      Create new secrets.
#    state [config/secret/data] [list/save/load] [state-name]
#                       App state type includes config, secret, and data.
#                       The state can be saved or loaded.
#                       Default state type is all states and default action is "list".
#
# Scnario:
#
#    1. First, use "<scirptname> env" to confirm the state is clean.
#    2. Then, use "<scriptname> config" to know how many configurations you have to set.
#    3. Then, use "<scriptname> secret-create" to create secret files.
#    4. Then, use "<scriptname> env" again to confirm the state is what you want.

#------------------------------------------------------------------------------
# Environments:

VERSION=0.4.1
SCRIPTNAME=vboxvm
APPNAME=vboxvm
SECRET=${SECRET:-"${PWD}/.secret/${SCRIPTNAME}"}
CONFIG=${CONFIG:-"${PWD}/.config/${SCRIPTNAME}"}

RAMSIZE=1024
DISKSIZE=10240
DISKPATHBASE="${HOME}/VirtualBox VMs"

DEFAULT_STORE=${STORE:-"${PWD}/.store/${SCRIPTNAME}"}
DEFAULT_BASE_CONFIG=nop
DEFAULT_BASE_SECRET=nop
DEFAULT_BASE_DATA=nop
DEFAULT_VMSPEC="u1 u2 u3"
DEFAULT_ISO="ubuntu-18.04.1-live-server-amd64.iso"
DEFAULT_GPGKEYNAME=${USERNAME}

STORE=`cat ${CONFIG}/store 2>/dev/null`
BASE_CONFIG=`cat ${CONFIG}/base_config 2>/dev/null`
BASE_SECRET=`cat ${CONFIG}/base_secret 2>/dev/null`
BASE_DATA=`cat ${CONFIG}/base_data 2>/dev/null`
VMSPEC=`cat ${CONFIG}/vmspec 2>/dev/null`
ISO=`cat ${CONFIG}/iso 2>/dev/null`
GPGKEYNAME=`cat ${CONFIG}/gpgkeyname 2>/dev/null`

export DOMAIN

#------------------------------------------------------------------------------
# Commands

case $1 in
	"version")
		echo ${VERSION}
		;;
	"env")
		echo =========================================================================
		echo "## SCRIPT NAME: ${SCRIPTNAME}"
		echo - VERSION: ${VERSION}
		echo - STORE: ${STORE}
		echo - SECRET: ${SECRET}
		echo - CONFIG: ${CONFIG}
		echo - VMSPEC: ${VMSPEC}
		echo - ISO: ${ISO}
		echo - GPGKEYNAME: ${GPGKEYNAME} $(gpg -k ${GPGKEYNAME} 2>/dev/null | sed -n '2p' | xargs)
		echo "## REQUIREMENT:"
		echo - VBoxManage: $(which VBoxManage)
		echo - gpg: $(which gpg)
		echo - tar: $(which tar)
		echo - colordiff: $(which colordiff)
		echo =========================================================================
		;;
	"config")
		shift
		mkdir -p ${CONFIG}
		case $1 in
			"store")
				shift
				STORE=${1:-${DEFAULT_STORE}}
				echo ${STORE} > ${CONFIG}/store
				;;
			"vmspec")
				shift
				VMSPEC=${1:-${DEFAULT_VMSPEC}}
				echo ${VMSPEC} > ${CONFIG}/vmspec
				;;
			"iso")
				shift
				ISO=${1:-${DEFAULT_ISO}}
				echo ${ISO} > ${CONFIG}/iso
				;;
			"gpg")
				shift
				GPGKEYNAME=${1:-${DEFAULT_GPGKEYNAME}}
				echo ${GPGKEYNAME} >  ${CONFIG}/gpgkeyname
				;;
			*)
				echo $(basename $0) config "<config_name>" "<config_value>"
				echo ""
				echo "config names:"
				echo "	store		The local repository for state."
				echo "			Ex: $(basename $0) config store ${DEFAULT_STORE}"
				echo "	vmspec		How much vm is required."
				echo "			Ex: $(basename $0) config vmspec ${DEFAULT_VMSPEC}"
				echo "	iso		the iso used for vm installation."
				echo "			Ex: $(basename $0) config iso ${DEFAULT_ISO}"
				echo "	gpg		configure which gpg key to use."
				echo "			Ex: $(basename $0) config gpg ${DEFAULT_GPGKEYNAME}"
				;;
		esac
		;;
	"secret-create")
		echo "NOT supported."
		;;
	"state")
		shift
		ACTION=$1
		TYPE=$2
		STATENAME=$3

		mkdir -p ${STORE}/state ${STORE}/data
		case ${ACTION} in
			"save")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_config
					$0 env > ${CONFIG}/env
					cd ${CONFIG}
					tar -zcf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz .
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_secret
					mv -f ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ${STORE}/state/${STATENAME}-bak-${APPNAME}-secret.tgz.enc &>/dev/null
					cd ${SECRET}
					tar -zc . | gpg -ear ${GPGKEYNAME} -o ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo "DATA state not support."
				fi
				;;
			"load")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz ]
					then
						cd ${CONFIG}
						tar -zxf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_config
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ]
					then
						cd ${SECRET}
						gpg -d ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc | tar xz
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_secret
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo "DATA state not support."
				fi
				;;
			"list"|*)
				HC='\033[0;93m'
				NC='\033[0m'
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## CONFIG: ${BASE_CONFIG}${NC}"
					cd ${STORE}/state
					ls *-${APPNAME}-config.tgz 2>/dev/null | sed "s/\(.*\)-${APPNAME}-config.tgz/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## SECRET: ${BASE_SECRET}${NC}"
					cd ${STORE}/state
					ls *-${APPNAME}-secret.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-secret.tgz.enc/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## DATA  : ${BASE_DATA}${NC}"
					cd ${STORE}/data
					ls *-${APPNAME}-data.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-data.tgz.enc/           \1/"
					cd - &>/dev/null
				fi

				echo -e "${HC}## ENV   : STATE                                              | CURRENT${NC}"
				$0 env | colordiff -y --suppress-common-lines ${CONFIG}/env -
				;;
		esac
		;;
	"vm")
		shift
		case $1 in
			"create")
				for VMNAME in $VMSPEC
				do
					DISK1="${DISKPATHBASE}/${VMNAME}/disk01.vdi"
					DISK2="${DISKPATHBASE}/${VMNAME}/disk02.vdi"
					VBoxManage createvm --name ${VMNAME} --register
					VBoxManage modifyvm ${VMNAME} --memory ${RAMSIZE} --acpi on --boot2 dvd --nic1 nat --ostype Ubuntu
					VBoxManage createvdi --filename "${DISK1}" --size ${DISKSIZE}
					VBoxManage createvdi --filename "${DISK2}" --size ${DISKSIZE}
					VBoxManage storagectl ${VMNAME} --name "IDE Controller" --add ide
					VBoxManage storageattach ${VMNAME} --storagectl "IDE Controller" --port 0 --device 0 --type hdd --medium "${DISK1}"
					VBoxManage storageattach ${VMNAME} --storagectl "IDE Controller" --port 1 --device 0 --type hdd --medium "${DISK2}"
					VBoxManage storageattach ${VMNAME} --storagectl "IDE Controller" --port 0 --device 1 --type dvddrive --medium ${ISO}
					VBoxHeadless --startvm ${VMNAME}&
				done
				;;
			"delete")
				for VMNAME in $VMSPEC
				do
					VBoxManage controlvm ${VMNAME} poweroff
					VBoxManage unregistervm --delete ${VMNAME}
				done
				;;
		esac
		;;
	*)
		echo $(basename $0) version
		echo $(basename $0) env
		echo $(basename $0) config ...
		echo $(basename $0) secret-create
		echo $(basename $0) "state [list/save/load] [config/secret/data] [state_name, ex: date-stage-env]"
		echo $(basename $0) "vm [create/delete]"
		;;
esac

